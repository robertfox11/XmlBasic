Xml 
es un dato basado en texto para que la maquina y la persona pueda leer facilmente
Se deriva de SGML
standar  generalized Markup lenguaje 
Nos sirve para describir la caracteristicas que tiene determinado un documento 
No es un lenguaje de programacion 
se utiliza tags para guardar y organizar los datos 
Es extensible podemos crear nuestros propios tags  
nuestros propios lenguaje
es un standar public
Markup
Son nuestros marcadores  define la reglas para codificar un documento
El formato que usa puede leer tantos las maquinas como los humanos
Son simbolos que dan informacion la cual se adiciona el documento y mejora el significado
identifica las partes
indica como las partes se relaciona
tags
se coloca entre simbolos <> se necesitara un cierre </>

Sintaxis
    Declaracion
    puede o no puede ir es opcional  se recomienda debe ser el primer elemento
    Es sensible a mayuscula y minuscula
    empieza con xml y luego la version  Encoding especifica el tipo de codificacion por los caracteres

    Tags
    Es un elemento de estructura
    Se conoce como nodo de xml o elementos 
    El nombre se coloca entre <>
    Es sensible en mayuscula y minuscula 
    Debe tener apertura y cierre  si no hay contenido se llama tag vacio
    En caso de simple se coloca de la siguiente forma  <miElement/>

    Elemento de Raiz 
    Solamente se tiene un elemento de raiz
    Es el nivel mas alto
    los demas elemento se anidan a el 
    Podemos pensar en el documento xml como un arbol

    Atributo
    Especifca una propiedad que tiene el elemento 
    Se usa como par nombre/Valor
    se puede tener mas de un atributo 
    es sensible a mayuscual y minuscula
    El nombre de atributo se coloca normal y el valor va entre comillas

Referencia
Adiciona Texto o informacion en el documento 
Siempre empiezan con & y termina con ;
Existen dos tipos de renferencia de entidades
    contiene un nombre entre el inicioy el final 
    &amp
Referencia de caracteres 
    contiene un # seguido de un numero 
    el numero es un codigo Unicode para el caracter
    &#65

Texto
los espeacio, tabulaciones y saltos de lineas entre atributos se ignoran
Algunos caracteres son reservados para la SIntaxis y no se pueden usar directamente por lo que hay que usar un reemplazo 
Estos caracteres se conocen como entidades de caracteres predefinidas
< &lt;
> &gt;
& &amp;
' &apos;
" &quot;

Entidades numericas de caracteres
Usamos este codigo
Decimal  Hexadecimal;
< &#60;  &#x3C;  
> &#63;  &#x3E;
' &#39;  &#x26;
& &#38;  &#x27;
" &#34;  &#x22;

Espacios significativo 
Si el espacio forma parte del texto 
insignificativo
se ignora los espacio es insignificativo

documento Xml
tiene dos partes 
    documento prolog
        Siempre va ir la parte de arriba del documento 
        Va antes del elemento raiz
        Contiene la declaracion xml 
    documento element
        Esta por una jerarquia
        cada seccion tiene un proposito especificativo
        las seccion se crean con elementos que a su vez pueden contener otros elementos

TIPOS Atributo
Cadena
Tokenized
    id identificar de forma unica del elemento 
    idref Referencia de un id
    IdrefS Referencia de todos los id de los elementos
    Entity el atributo representa una entidad externa en el documento
    Entities El atributo representa entidades externas en el documentos
    NMTOKEN tiene restricciones sobre el dato puede ser parte del atributo

Enumerados valores predefinidos en su declaracion
    NotationType, va estar Referenciado a una anotacion declarado  en el documento
    Enumeracion, define una lista de valores que el atributo puede tener 

Commentario se colacan de esta manera
<!-- Second Plate-->

CDATA es caracter data
Se toma como texto directo y el parser ignora <> & lo que se encuentre dentro no se considera adentro de un Markup
Podemos usarlos para colocar las entidades de caracter directamente 
<![CDATA[
    Texto
]]>
No se permite anidamientos

Instrucciones de procesado PI
permite que el documento tenga Instrucciones para las aplicaciones
no forma parte de los datos del documento
Puede contener cualquier dato menos ?>
Son pasos a la aplicaciones
<?target instruction?>
    target -  identifica la aplicacion a cual se da la instruction
    instruction - la informacion que procesa a la aplicaciones

<?xml-stylesheet href="miestilos.css" type="text/css"?>
indica que se dirige al browser 
href y type  son las instructiones

Validation 
La Validation se lleva a cabo de dos formas 
Well-formed XML documento bien formado
valid XML documento -documento valido 

Bien formado
Si no se usa DTD debe usarse correctamente  &, <,>,', "
En el anidamientos el tag interno debe cerrarse antes del tag externo 
todos los tag debe tener un cierre
Tiene que tener un elemento raiz
VAlidado
Si esta bien formado y tiene un DTD decimos que es valido 

DTD
document type Declaration
Verifica el vocabulario 
Verifica la validez de la estructura con las reglas de un lenguaje XML en particular
Puede especificar el documento en otro documento
El los externos usamos 
<!DOCTYPE curso System "curso.dtd">
Iniciamos 
<!DOCTYPE
Element - Nos sireve para decirle al parser a partir de cual elemento es la raiz para el parse
DTD identifier es el path de un archivo URL
[] Ahi se colocan las declaracion que se conocen como subconjunto  internos 
<!DOCTYPE element "identifier">

XSD
Se usan para describir